!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(1);window.onload=function(e){var r=new n.default,t=r.generate(!0);console.log(t);var o=r.deal(t);console.log(o,t);o=r.deal(t,!0);console.log(o,t);o=r.deal(t,!1,!0);console.log(o,t);o=r.deal(t,!0,!0);console.log(o,t)}},function(e,r,t){"use strict";var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,l=t.call(e),a=[];try{for(;(void 0===r||r-- >0)&&!(n=l.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=l.return)&&t.call(l)}finally{if(o)throw o.error}}return a};Object.defineProperty(r,"__esModule",{value:!0});var l=t(2),a=t(3),i=function(){function e(){}return e.prototype.generate=function(e){var r,t,o,i;void 0===e&&(e=!1);var u=new Array,c=[a.SUIT_C,a.SUIT_D,a.SUIT_H,a.SUIT_S];e&&c.push(a.SUIT_B,a.SUIT_R);var f=[2,3,4,5,6,7,8,9,10,11,12,13,14];try{for(var s=n(l.forIndex(c)),d=s.next();!d.done;d=s.next()){var _=d.value,y=_.item,p=_.index;try{for(var v=(o=void 0,n(f)),b=v.next();!b.done;b=v.next()){var h=b.value;if(-1!==[a.SUIT_B,a.SUIT_R].indexOf(y)&&(h=a.VALU_J),u.push({color:-1==[a.SUIT_D,a.SUIT_H,a.SUIT_R].indexOf(y)?a.COLO_B:a.COLO_R,html:""+a.HTML_BOCARD+y[0].toUpperCase()+h,rank:this._calculate_rank({suit_i:p,value:h}),suit:y,value:h}),-1!==[a.SUIT_B,a.SUIT_R].indexOf(y))break}}catch(e){o={error:e}}finally{try{b&&!b.done&&(i=v.return)&&i.call(v)}finally{if(o)throw o.error}}}}catch(e){r={error:e}}finally{try{d&&!d.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}return this._shuffle(u)},e.prototype.deal=function(e,r,t){return void 0===r&&(r=!1),void 0===t&&(t=!1),r?t?e.pop():e.shift():t?e.slice(-1)[0]:e[0]},e.prototype._calculate_rank=function(e){var r=e.suit_i;return 4*(e.value-2)+r},e.prototype._shuffle=function(e){for(var r,t=e.length-1;t>0;t--){var n=Math.floor(Math.random()*(t+1));r=o([e[n],e[t]],2),e[t]=r[0],e[n]=r[1]}return e},e}();r.default=i},function(e,r,t){"use strict";var n=this&&this.__generator||function(e,r){var t,n,o,l,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function i(l){return function(i){return function(l){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,n&&(o=2&l[0]?n.return:l[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,l[1])).done)return o;switch(n=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,n=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===l[0]||2===l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=r.call(e,a)}catch(e){l=[6,e],n=0}finally{t=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,i])}}},o=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.forIndex=function(e){var r,t,l,a,i,u;return n(this,(function(n){switch(n.label){case 0:r=0,n.label=1;case 1:n.trys.push([1,6,7,8]),t=o(e),l=t.next(),n.label=2;case 2:return l.done?[3,5]:[4,{item:l.value,index:r}];case 3:n.sent(),r++,n.label=4;case 4:return l=t.next(),[3,2];case 5:return[3,8];case 6:return a=n.sent(),i={error:a},[3,8];case 7:try{l&&!l.done&&(u=t.return)&&u.call(t)}finally{if(i)throw i.error}return[7];case 8:return[2]}}))}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.SUIT_H="hearts",r.SUIT_S="spades",r.SUIT_C="clubs",r.SUIT_D="diamonds",r.SUIT_B="blackjoker",r.SUIT_R="redjoker",r.COLO_R="red",r.COLO_B="black",r.VALU_J=14,r.HTML_BOCARD="buzzonline__playingcard_",r.CONS_ERR_AUDIO_NOT_INSTANTIATABLE="Could not instantiate audio engine. Audio is not supported.",r.AUDIO_EXT="wav"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,